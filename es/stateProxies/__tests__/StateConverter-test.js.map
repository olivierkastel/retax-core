{"version":3,"sources":["src/stateProxies/__tests__/StateConverter-test.ts","src/stateProxies/__tests__/StateConverter-test.js"],"names":["jest","unmock","StateConverter","Consumer","describe","converter","beforeEach","it","res","convertStateToImmutable","routing","someProps","session","token","user","name","expect","toEqual","toJS"],"mappings":";;;;;;AAAAA,KAAKC,MAAL,CAAY,mBAAZ;ACCA,ODCOC,cCDP,MDC2B,mBCD3B;;IDIAC,Q;;;;;;;;;;EAAuBD,c;;AAQvBE,SAAS,gBAAT,EAA2B,YAAA;AACzB,QAAIC,kBAAJ;AAEAC,eAAW,YAAA;AACTD,oBAAY,IAAIF,QAAJ,EAAZ;AACD,KAFD;AAIAI,OAAG,2DAAH,EAAgE,YAAA;AAC9D,YAAMC,MAAMH,UAAUI,uBAAV,CAA0C;AACpDC,qBAAS;AACPC,2BAAW;AADJ,aAD2C;AAIpDC,qBAAS;AACPC,uBAAO;AADA,aAJ2C;AAOpDC,kBAAM;AACJC,sBAAM;AADF;AAP8C,SAA1C,EAUT,CAAC,SAAD,CAVS,CAAZ;AAYAC,eAAOR,IAAIE,OAAX,EAAoBO,OAApB,CAA4B;AAC1BN,uBAAW;AADe,SAA5B;AAIAK,eAAOR,IAAII,OAAJ,CAAYM,IAAZ,EAAP,EAA2BD,OAA3B,CAAmC;AACjCJ,mBAAO;AAD0B,SAAnC;AAIAG,eAAOR,IAAIM,IAAJ,CAASI,IAAT,EAAP,EAAwBD,OAAxB,CAAgC;AAC9BF,kBAAM;AADwB,SAAhC;AAGD,KAxBD;AA0BAR,OAAG,uCAAH,EAA4C,YAAA;AAC1C,YAAMC,MAAMH,UAAUI,uBAAV,EAAZ;AAEAO,eAAOR,GAAP,EAAYS,OAAZ,CAAoB,EAApB;AACD,KAJD;AAKD,CAtCD","file":"StateConverter-test.js","sourcesContent":["jest.unmock('../StateConverter');\n\nimport StateConverter from '../StateConverter';\nimport { Collection } from 'immutable';\n\nclass Consumer extends StateConverter {}\n\nexport interface IState {\n  routing: { someProps: boolean };\n  session: Collection<string, string>;\n  user: Collection<string, string>;\n}\n\ndescribe('StateConverter', () => {\n  let converter: Consumer;\n\n  beforeEach(() => {\n    converter = new Consumer();\n  });\n\n  it('converts an object values to immutable skipping some keys', () => {\n    const res = converter.convertStateToImmutable<IState>({\n      routing: {\n        someProps: true,\n      },\n      session: {\n        token: '123456789',\n      },\n      user: {\n        name: 'Thomas',\n      },\n    }, ['routing']);\n\n    expect(res.routing).toEqual({\n      someProps: true,\n    });\n\n    expect(res.session.toJS()).toEqual({\n      token: '123456789',\n    });\n\n    expect(res.user.toJS()).toEqual({\n      name: 'Thomas',\n    });\n  });\n\n  it('converts undefined to an empty object', () => {\n    const res = converter.convertStateToImmutable<IState>();\n\n    expect(res).toEqual({});\n  });\n});\n\n","jest.unmock('../StateConverter');\nimport StateConverter from '../StateConverter';\nclass Consumer extends StateConverter {\n}\ndescribe('StateConverter', () => {\n    let converter;\n    beforeEach(() => {\n        converter = new Consumer();\n    });\n    it('converts an object values to immutable skipping some keys', () => {\n        const res = converter.convertStateToImmutable({\n            routing: {\n                someProps: true,\n            },\n            session: {\n                token: '123456789',\n            },\n            user: {\n                name: 'Thomas',\n            },\n        }, ['routing']);\n        expect(res.routing).toEqual({\n            someProps: true,\n        });\n        expect(res.session.toJS()).toEqual({\n            token: '123456789',\n        });\n        expect(res.user.toJS()).toEqual({\n            name: 'Thomas',\n        });\n    });\n    it('converts undefined to an empty object', () => {\n        const res = converter.convertStateToImmutable();\n        expect(res).toEqual({});\n    });\n});\n"]}