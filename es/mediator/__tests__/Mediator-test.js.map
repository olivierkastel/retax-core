{"version":3,"sources":["src/mediator/__tests__/Mediator-test.js","src/mediator/__tests__/Mediator-test.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","throw","result","done","then","apply","jest","unmock","Mediator","describe","context","history","listen","fn","cookieProxy","authToken","stateProxy","read","initialState","reduxFacade","dispatch","initialize","routerFacade","renderProps","lifecycleActions","didResolveRoute","historyDidChanged","initializationComplete","willResolveRoute","builder","build","theApp","kernelFacade","theKernel","pit","mediator","run","app","expect","toBeCalled","toBeCalledWith","toEqual"],"mappings":"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","file":"Mediator-test.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n};\njest.unmock('inversify');\njest.unmock('../Mediator');\nimport Mediator from '../Mediator';\ndescribe('Mediator Flow', () => {\n    const context = {\n        history: {\n            listen: jest.fn(),\n        },\n    };\n    const cookieProxy = {\n        authToken: '1234',\n    };\n    const stateProxy = {\n        read: jest.fn(() => ({ initialState: true })),\n    };\n    const reduxFacade = {\n        dispatch: jest.fn(),\n        initialize: jest.fn(),\n    };\n    const routerFacade = {\n        initialize: jest.fn(() => ({ renderProps: true })),\n    };\n    const lifecycleActions = {\n        didResolveRoute: jest.fn(() => ({ didResolveRoute: true })),\n        historyDidChanged: jest.fn(() => ({ historyDidChanged: true })),\n        initializationComplete: jest.fn(() => ({ initializationComplete: true })),\n        willResolveRoute: jest.fn(() => ({ willResolveRoute: true })),\n    };\n    const builder = {\n        build: jest.fn(() => ({ theApp: true })),\n    };\n    const kernelFacade = {\n        theKernel: true,\n    };\n    pit('mediates the flow of retax', () => __awaiter(this, void 0, void 0, function* () {\n        const mediator = new Mediator(context, cookieProxy, stateProxy, reduxFacade, routerFacade, lifecycleActions, builder);\n        const app = yield mediator.run(kernelFacade);\n        expect(stateProxy.read).toBeCalled();\n        expect(reduxFacade.initialize).toBeCalledWith({ initialState: true });\n        expect(lifecycleActions.willResolveRoute).toBeCalled();\n        expect(reduxFacade.dispatch).toBeCalledWith({ willResolveRoute: true });\n        expect(routerFacade.initialize).toBeCalled();\n        expect(lifecycleActions.didResolveRoute).toBeCalled();\n        expect(reduxFacade.dispatch).toBeCalledWith({ didResolveRoute: true });\n        expect(builder.build).toBeCalledWith(kernelFacade);\n        expect(context.history.listen).toBeCalled();\n        expect(lifecycleActions.initializationComplete).toBeCalled();\n        expect(app).toEqual({ theApp: true });\n    }));\n});\n","jest.unmock('inversify');\njest.unmock('../Mediator');\n\nimport Mediator from '../Mediator';\n\ndescribe('Mediator Flow', () => {\n  const context = {\n    history: {\n      listen: jest.fn(),\n    },\n  };\n\n  const cookieProxy = {\n    authToken: '1234',\n  };\n\n  const stateProxy = {\n    read: jest.fn(() => ({ initialState: true })),\n  };\n\n  const reduxFacade = {\n    dispatch: jest.fn(),\n    initialize: jest.fn(),\n  };\n\n  const routerFacade = {\n    initialize: jest.fn(() => ({ renderProps: true })),\n  };\n\n  const lifecycleActions = {\n    didResolveRoute: jest.fn(() => ({ didResolveRoute: true })),\n    historyDidChanged: jest.fn(() => ({ historyDidChanged: true })),\n    initializationComplete: jest.fn(() => ({ initializationComplete: true })),\n    willResolveRoute: jest.fn(() => ({ willResolveRoute: true })),\n  };\n\n  const builder = {\n    build: jest.fn(() => ({ theApp: true })),\n  };\n\n  const kernelFacade = {\n    theKernel: true,\n  };\n\n  pit('mediates the flow of retax', async () => {\n    const mediator = new Mediator(\n      <any>context,\n      <any>cookieProxy,\n      <any>stateProxy,\n      <any>reduxFacade,\n      <any>routerFacade,\n      <any>lifecycleActions,\n      <any>builder\n    );\n\n    const app = await mediator.run(<any>kernelFacade);\n\n    expect(stateProxy.read).toBeCalled();\n    expect(reduxFacade.initialize).toBeCalledWith({ initialState: true });\n\n    expect(lifecycleActions.willResolveRoute).toBeCalled();\n    expect(reduxFacade.dispatch).toBeCalledWith({ willResolveRoute: true });\n\n    expect(routerFacade.initialize).toBeCalled();\n\n    expect(lifecycleActions.didResolveRoute).toBeCalled();\n    expect(reduxFacade.dispatch).toBeCalledWith({ didResolveRoute: true });\n\n    expect(builder.build).toBeCalledWith(kernelFacade);\n\n    expect(context.history.listen).toBeCalled();\n\n    expect(lifecycleActions.initializationComplete).toBeCalled();\n\n    expect(app).toEqual({ theApp: true });\n  });\n});\n"]}