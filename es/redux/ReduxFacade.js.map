{"version":3,"sources":["src/redux/ReduxFacade.js","src/redux/ReduxFacade.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","injectable","inject","combineReducers","createStore","applyMiddleware","compose","routerReducer","routerMiddleware","syncHistoryWithStore","internalReducers","credentialsMiddleware","setAuthToken","RETAX_CONFIG_STORE","COOKIE_PROXY","CONTEXT","ReduxFacade","_configStore","_cookieProxy","_context","store","getState","retax","get","token","dispatch","action","initialState","_store","_initStore","authToken","config","middlewares","reducers","storeEnhancers","rootReducer","_combineReducers","_createStore","history","assign","routing","finalStoreEnhancers","reduxRouterMiddleware","middlewareEnhancer","filter","x","push","undefined","Error"],"mappings":"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","file":"ReduxFacade.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { injectable, inject } from 'inversify';\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\nimport { routerReducer, routerMiddleware, syncHistoryWithStore } from 'react-router-redux';\nimport * as internalReducers from './reducers';\nimport { credentialsMiddleware } from './middlewares';\nimport { setAuthToken } from './actionsCreators';\nimport { RETAX_CONFIG_STORE, COOKIE_PROXY, CONTEXT } from '../inversify';\nlet ReduxFacade = class ReduxFacade {\n    constructor(_configStore, _cookieProxy, _context) {\n        this._configStore = _configStore;\n        this._cookieProxy = _cookieProxy;\n        this._context = _context;\n    }\n    get store() {\n        if (this._store === undefined) {\n            throw new Error('The store has not been initialized yet');\n        }\n        return this._store;\n    }\n    getAuthToken() {\n        const { retax } = this.store.getState();\n        return retax.get('authToken');\n    }\n    setAuthToken(token) {\n        return this.dispatch(setAuthToken(token));\n    }\n    dispatch(action) {\n        return this.store.dispatch(action);\n    }\n    initialize(initialState) {\n        // create the store\n        this._store = this._initStore(initialState);\n        // initialize the store with the current auth token\n        this.dispatch(setAuthToken(this._cookieProxy.authToken));\n        return this._store;\n    }\n    _initStore(initialState) {\n        const { middlewares, reducers, storeEnhancers } = this._configStore.config.store;\n        const rootReducer = this._combineReducers(reducers);\n        const store = this._createStore({\n            initialState,\n            history: this._context.history,\n            rootReducer,\n            storeEnhancers,\n            middlewares,\n        });\n        this._context.history = syncHistoryWithStore(this._context.history, store);\n        return store;\n    }\n    _combineReducers(reducers) {\n        return combineReducers(Object.assign({\n            routing: routerReducer,\n        }, internalReducers, reducers));\n    }\n    _createStore(config) {\n        const { initialState, history, middlewares = [], storeEnhancers = [], rootReducer } = config;\n        let finalStoreEnhancers = [];\n        const reduxRouterMiddleware = routerMiddleware(history);\n        const middlewareEnhancer = applyMiddleware(...[\n            ...middlewares.filter(x => !!x),\n            credentialsMiddleware(this._cookieProxy),\n            reduxRouterMiddleware,\n        ].filter(x => !!x));\n        finalStoreEnhancers.push(...storeEnhancers.filter(x => !!x));\n        return createStore(rootReducer, initialState, compose(middlewareEnhancer));\n    }\n};\nReduxFacade = __decorate([\n    injectable(),\n    __param(0, inject(RETAX_CONFIG_STORE)),\n    __param(1, inject(COOKIE_PROXY)),\n    __param(2, inject(CONTEXT)), \n    __metadata('design:paramtypes', [Object, Object, Object])\n], ReduxFacade);\nexport default ReduxFacade;\n","import { injectable, inject } from 'inversify';\nimport { combineReducers, createStore, applyMiddleware, compose, Store, Reducer, ReducersMapObject } from 'redux';\nimport { routerReducer, routerMiddleware, syncHistoryWithStore } from 'react-router-redux';\n\nimport { IReduxFacade, ICreateStoreConfig } from './interfaces';\nimport * as internalReducers from './reducers';\nimport { credentialsMiddleware } from './middlewares';\nimport { setAuthToken, TSetAuthTokenPayload } from './actionsCreators';\n\nimport { IRetaxConfigStore } from '../configStores';\nimport { ICookieProxy } from '../cookieProxies';\nimport { IImmutableState } from '../stateProxies';\nimport { IContext } from '../context';\n\nimport { IAction } from 'retax-utils';\n\nimport {\n  RETAX_CONFIG_STORE,\n  COOKIE_PROXY,\n  CONTEXT,\n} from '../inversify';\n\n@injectable()\nexport default class ReduxFacade implements IReduxFacade {\n  private _store: Store<any>;\n\n  constructor(\n    @inject(RETAX_CONFIG_STORE) private _configStore: IRetaxConfigStore,\n    @inject(COOKIE_PROXY) private _cookieProxy: ICookieProxy,\n    @inject(CONTEXT) private _context: IContext\n  ) {\n  }\n\n  get store(): Store<any> {\n    if (this._store === undefined) {\n      throw new Error('The store has not been initialized yet');\n    }\n\n    return this._store;\n  }\n\n  public getAuthToken(): string {\n    const { retax } = this.store.getState();\n\n    return retax.get('authToken');\n  }\n\n  public setAuthToken(token: string): IAction<TSetAuthTokenPayload, void> {\n    return this.dispatch(setAuthToken(token));\n  }\n\n  public dispatch(action: IAction<any, any>): IAction<any, any> {\n    return this.store.dispatch(action);\n  }\n\n  public initialize(initialState: IImmutableState): Store<any> {\n    // create the store\n    this._store = this._initStore(initialState);\n\n\n    // initialize the store with the current auth token\n    this.dispatch(setAuthToken(this._cookieProxy.authToken));\n\n    return this._store;\n  }\n\n  private _initStore(initialState: IImmutableState): Store<any> {\n    const { middlewares, reducers, storeEnhancers } = this._configStore.config.store;\n    const rootReducer = this._combineReducers(reducers);\n\n    const store = this._createStore({\n      initialState,\n      history: this._context.history,\n      rootReducer,\n      storeEnhancers,\n      middlewares,\n    });\n\n    this._context.history = syncHistoryWithStore(this._context.history, store);\n\n    return store;\n  }\n\n  private _combineReducers(reducers: ReducersMapObject): Reducer<any> {\n    return combineReducers(Object.assign({\n      routing: routerReducer,\n    }, internalReducers, reducers));\n  }\n\n  private _createStore(config: ICreateStoreConfig): Store<any> {\n    const { initialState, history, middlewares = [], storeEnhancers = [], rootReducer } = config;\n    let finalStoreEnhancers = [];\n\n    const reduxRouterMiddleware = routerMiddleware(history);\n\n    const middlewareEnhancer = applyMiddleware(\n      ...[\n        ...middlewares.filter(x => !!x),\n        credentialsMiddleware(this._cookieProxy),\n        reduxRouterMiddleware,\n      ].filter(x => !!x)\n    );\n\n    finalStoreEnhancers.push(...storeEnhancers.filter(x => !!x));\n\n    return createStore(\n      rootReducer,\n      initialState,\n      compose(middlewareEnhancer)\n    );\n  }\n}\n"]}