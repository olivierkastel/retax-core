{"version":3,"sources":["src/JSXBuilders/__tests__/ClientBuilder-test.jsx"],"names":["jest","disableAutomock","React","shallow","configureStore","ClientBuilder","RetaxProviderComponent","InverisfyKernelFacade","describe","reduxFacade","store","routerFacade","renderProps","firstProp","it","configStore","config","react","appendChild","undefined","kernelFacade","builder","app","build","expect","type","toEqual","wrapper","reduxProvider","find","reactRouter","prop","children","text"],"mappings":"AAAAA,KAAKC,eAAL;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,sBAAP,MAAmC,sCAAnC;AACA,OAAOC,qBAAP,MAAkC,mDAAlC;AACAC,SAAS,eAAT,EAA0B,YAAM;AAC5B,QAAMC,cAAc;AAChBC,eAAON,iBAAiB,EAAjB;AADS,KAApB;AAGA,QAAMO,eAAe;AACjBC,qBAAa;AACTC,uBAAW;AADF;AADI,KAArB;AAKAC,OAAG,0BAAH,EAA+B,YAAM;AACjC,YAAMC,cAAc;AAChBC,oBAAQ;AACJC,uBAAO;AACHC,iCAAaC;AADV;AADH;AADQ,SAApB;AAOA,YAAMC,eAAe,IAAIb,qBAAJ,EAArB;AACA,YAAMc,UAAU,IAAIhB,aAAJ,CAAkBU,WAAlB,EAA+BT,sBAA/B,EAAuDG,WAAvD,EAAoEE,YAApE,CAAhB;AACA,YAAMW,MAAMD,QAAQE,KAAR,CAAcH,YAAd,CAAZ;AACAI,eAAOF,IAAIG,IAAX,EAAiBC,OAAjB,CAAyBpB,sBAAzB;AACA,YAAMqB,UAAUxB,QAAQmB,GAAR,CAAhB;AACA,YAAMM,gBAAgBD,QAAQE,IAAR,CAAa,UAAb,CAAtB;AACA,YAAMC,cAAcH,QAAQE,IAAR,CAAa,QAAb,CAApB;AACAL,eAAOI,cAAcG,IAAd,CAAmB,OAAnB,CAAP,EAAoCL,OAApC,CAA4CjB,YAAYC,KAAxD;AACAc,eAAOM,YAAYC,IAAZ,CAAiB,WAAjB,CAAP,EAAsCL,OAAtC,CAA8C,MAA9C;AACH,KAjBD;AAkBAZ,OAAG,0CAAH,EAA+C,YAAM;AACjD,YAAMC,cAAc;AAChBC,oBAAQ;AACJC,uBAAO;AACHC,iCAAa;AAAA;AAAA,0BAAK,IAAG,cAAR;AAAA;AAAA;AADV;AADH;AADQ,SAApB;AAOA,YAAME,eAAe,IAAIb,qBAAJ,EAArB;AACA,YAAMc,UAAU,IAAIhB,aAAJ,CAAkBU,WAAlB,EAA+BT,sBAA/B,EAAuDG,WAAvD,EAAoEE,YAApE,CAAhB;AACA,YAAMW,MAAMD,QAAQE,KAAR,CAAcH,YAAd,CAAZ;AACA,YAAMO,UAAUxB,QAAQmB,GAAR,CAAhB;AACA,YAAMU,WAAWL,QAAQE,IAAR,CAAa,eAAb,CAAjB;AACAL,eAAOQ,SAASC,IAAT,EAAP,EAAwBP,OAAxB,CAAgC,cAAhC;AACH,KAdD;AAeH,CA1CD","file":"ClientBuilder-test.js","sourcesContent":["jest.disableAutomock();\nimport * as React from 'react';\nimport { shallow } from 'enzyme';\nimport configureStore from 'redux-mock-store';\nimport ClientBuilder from '../ClientBuilder';\nimport RetaxProviderComponent from '../../components/Retax/RetaxProvider';\nimport InverisfyKernelFacade from '../../inversifyKernelFacade/InversifyKernelFacade';\ndescribe('ClientBuilder', () => {\n    const reduxFacade = {\n        store: configureStore()({}),\n    };\n    const routerFacade = {\n        renderProps: {\n            firstProp: '1234',\n        },\n    };\n    it('build and render the app', () => {\n        const configStore = {\n            config: {\n                react: {\n                    appendChild: undefined,\n                },\n            },\n        };\n        const kernelFacade = new InverisfyKernelFacade();\n        const builder = new ClientBuilder(configStore, RetaxProviderComponent, reduxFacade, routerFacade);\n        const app = builder.build(kernelFacade);\n        expect(app.type).toEqual(RetaxProviderComponent);\n        const wrapper = shallow(app);\n        const reduxProvider = wrapper.find('Provider');\n        const reactRouter = wrapper.find('Router');\n        expect(reduxProvider.prop('store')).toEqual(reduxFacade.store);\n        expect(reactRouter.prop('firstProp')).toEqual('1234');\n    });\n    it('build and render the app with a children', () => {\n        const configStore = {\n            config: {\n                react: {\n                    appendChild: <div id=\"the-children\">Hello World!</div>,\n                },\n            },\n        };\n        const kernelFacade = new InverisfyKernelFacade();\n        const builder = new ClientBuilder(configStore, RetaxProviderComponent, reduxFacade, routerFacade);\n        const app = builder.build(kernelFacade);\n        const wrapper = shallow(app);\n        const children = wrapper.find('#the-children');\n        expect(children.text()).toEqual('Hello World!');\n    });\n});\n"]}