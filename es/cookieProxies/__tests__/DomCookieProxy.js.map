{"version":3,"sources":["src/cookieProxies/__tests__/DomCookieProxy.ts","src/cookieProxies/__tests__/DomCookieProxy.js"],"names":["jest","unmock","COOKIE_AUTH_TOKEN_KEY","DomCookieProxy","Cookie","describe","it","cookieProxy","authToken","expect","get","toBeCalledWith","set","expires","deleteAuthToken","remove"],"mappings":"AAAAA,KAAKC,MAAL,CAAY,WAAZ;AACAD,KAAKC,MAAL,CAAY,iBAAZ;AACAD,KAAKC,MAAL,CAAY,gCAAZ;AACAD,KAAKC,MAAL,CAAY,mBAAZ;AACAD,KAAKC,MAAL,CAAY,gBAAZ;ACCA,SDCSC,qBCDT,QDCsC,iBCDtC;AACA,ODCOC,cCDP,MDC2B,mBCD3B;AACA,ODCO,KAAKC,MCDZ,MDCwB,WCDxB;ADGAC,SAAS,gBAAT,EAA2B,YAAA;AACzBC,OAAG,8BAAH,EAAmC,YAAA;AACjC,YAAMC,cAAc,IAAIJ,cAAJ,EAApB;AAEA;AAHiC,YAIzBK,SAJyB,GAIXD,WAJW,CAIzBC,SAJyB;AAKjC;;AAEAC,eAAOL,OAAOM,GAAd,EAAmBC,cAAnB,CACET,qBADF;AAGD,KAVD;AAYAI,OAAG,oBAAH,EAAyB,YAAA;AACvB,YAAMC,cAAc,IAAIJ,cAAJ,EAApB;AAEAI,oBAAYC,SAAZ,GAAwB,MAAxB;AAEAC,eAAOL,OAAOQ,GAAd,EAAmBD,cAAnB,CACET,qBADF,EAEE,MAFF,EAGE,EAAEW,SAAS,CAAX,EAHF;AAKD,KAVD;AAYAP,OAAG,wBAAH,EAA6B,YAAA;AAC3B,YAAMC,cAAc,IAAIJ,cAAJ,EAApB;AAEAI,oBAAYO,eAAZ;AAEAL,eAAOL,OAAOW,MAAd,EAAsBJ,cAAtB,CACET,qBADF;AAGD,KARD;AASD,CAlCD","file":"DomCookieProxy.js","sourcesContent":["jest.unmock('inversify');\njest.unmock('../../constants');\njest.unmock('../../constants/internalConfig');\njest.unmock('../DomCookieProxy');\njest.unmock('../CookieProxy');\n\nimport { COOKIE_AUTH_TOKEN_KEY } from '../../constants';\nimport DomCookieProxy from '../DomCookieProxy';\nimport * as Cookie from 'js-cookie';\n\ndescribe('DomCookieProxy', () => {\n  it('reads the current auth token', () => {\n    const cookieProxy = new DomCookieProxy();\n\n    /* tslint:disable */\n    const { authToken } = cookieProxy;\n    /* tslint:enable */\n\n    expect(Cookie.get).toBeCalledWith(\n      COOKIE_AUTH_TOKEN_KEY\n    );\n  });\n\n  it('set the auth token', () => {\n    const cookieProxy = new DomCookieProxy();\n\n    cookieProxy.authToken = '1234';\n\n    expect(Cookie.set).toBeCalledWith(\n      COOKIE_AUTH_TOKEN_KEY,\n      '1234',\n      { expires: 1 }\n    );\n  });\n\n  it('removes the auth token', () => {\n    const cookieProxy = new DomCookieProxy();\n\n    cookieProxy.deleteAuthToken();\n\n    expect(Cookie.remove).toBeCalledWith(\n      COOKIE_AUTH_TOKEN_KEY\n    );\n  });\n});\n\n","jest.unmock('inversify');\njest.unmock('../../constants');\njest.unmock('../../constants/internalConfig');\njest.unmock('../DomCookieProxy');\njest.unmock('../CookieProxy');\nimport { COOKIE_AUTH_TOKEN_KEY } from '../../constants';\nimport DomCookieProxy from '../DomCookieProxy';\nimport * as Cookie from 'js-cookie';\ndescribe('DomCookieProxy', () => {\n    it('reads the current auth token', () => {\n        const cookieProxy = new DomCookieProxy();\n        /* tslint:disable */\n        const { authToken } = cookieProxy;\n        /* tslint:enable */\n        expect(Cookie.get).toBeCalledWith(COOKIE_AUTH_TOKEN_KEY);\n    });\n    it('set the auth token', () => {\n        const cookieProxy = new DomCookieProxy();\n        cookieProxy.authToken = '1234';\n        expect(Cookie.set).toBeCalledWith(COOKIE_AUTH_TOKEN_KEY, '1234', { expires: 1 });\n    });\n    it('removes the auth token', () => {\n        const cookieProxy = new DomCookieProxy();\n        cookieProxy.deleteAuthToken();\n        expect(Cookie.remove).toBeCalledWith(COOKIE_AUTH_TOKEN_KEY);\n    });\n});\n"]}