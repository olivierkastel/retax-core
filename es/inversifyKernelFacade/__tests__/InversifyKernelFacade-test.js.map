{"version":3,"sources":["src/inversifyKernelFacade/__tests__/InversifyKernelFacade-test.ts","src/inversifyKernelFacade/__tests__/InversifyKernelFacade-test.js"],"names":["jest","unmock","KernelModule","InversifyKernelFacade","describe","module1Id","Symbol","module2Id","module1","bind","toConstantValue","module2","baseModules","kernelModule","serviceId","it","kernelFacade","loadModules","expect","_loadedUserModules","get","toEqual","getService","module3Id","module3","userModules2","unloadModules","moduleId","myModule","modules","getAllServices","loadKernelModules"],"mappings":"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","file":"InversifyKernelFacade-test.js","sourcesContent":["jest.unmock('inversify');\njest.unmock('../InversifyKernelFacade');\n\nimport { interfaces, KernelModule } from 'inversify';\nimport { IUserModule } from '../interfaces';\nimport InversifyKernelFacade from '../InversifyKernelFacade';\n\ndescribe('InversifyKernelFacade', () => {\n  const module1Id = Symbol('module1');\n  const module2Id = Symbol('module2');\n  const module1 = new KernelModule((bind: interfaces.Bind) => bind(module1Id).toConstantValue(1));\n  const module2 = new KernelModule((bind: interfaces.Bind) => bind(module2Id).toConstantValue(2));\n\n  const baseModules: IUserModule[] = [\n    {\n      kernelModule: module1,\n      serviceId: module1Id,\n    },\n    {\n      kernelModule: module2,\n      serviceId: module2Id,\n    },\n  ];\n\n  it('loads modules into the kernel', () => {\n    const kernelFacade = new InversifyKernelFacade();\n\n    kernelFacade.loadModules(baseModules);\n\n    expect((<any>kernelFacade)._loadedUserModules.get(module1Id)).toEqual(true);\n    expect((<any>kernelFacade)._loadedUserModules.get(module2Id)).toEqual(true);\n\n    expect(kernelFacade.getService(module1Id)).toEqual(1);\n    expect(kernelFacade.getService(module2Id)).toEqual(2);\n\n    const module3Id = Symbol('module3');\n    const module3 = new KernelModule((bind: interfaces.Bind) => bind(module3Id).toConstantValue(3));\n\n    const userModules2: IUserModule[] = [\n      {\n        kernelModule: module3,\n        serviceId: module3Id,\n      },\n    ];\n\n    kernelFacade.loadModules(userModules2);\n\n    expect((<any>kernelFacade)._loadedUserModules.get(module3Id)).toEqual(true);\n\n    expect(kernelFacade.getService(module3Id)).toEqual(3);\n  });\n\n  it('unloads modules from the kernel', () => {\n    const kernelFacade = new InversifyKernelFacade();\n\n    kernelFacade.loadModules(baseModules);\n    kernelFacade.unloadModules(baseModules);\n\n    expect((<any>kernelFacade)._loadedUserModules.get(module1Id)).toEqual(false);\n    expect((<any>kernelFacade)._loadedUserModules.get(module2Id)).toEqual(false);\n  });\n\n  it('get all services with a same id', () => {\n    const kernelFacade = new InversifyKernelFacade();\n\n    const moduleId = Symbol('module');\n    const myModule = new KernelModule((bind: interfaces.Bind) => {\n      bind(moduleId).toConstantValue(1);\n      bind(moduleId).toConstantValue(2);\n    });\n\n    const modules: IUserModule[] = [\n      {\n        kernelModule: myModule,\n        serviceId: moduleId,\n      },\n    ];\n\n    kernelFacade.loadModules(modules);\n\n    expect((<any>kernelFacade)._loadedUserModules.get(moduleId)).toEqual(true);\n\n    expect(kernelFacade.getAllServices(moduleId)).toEqual([1, 2]);\n  });\n\n  it('loads raw kernel module into the kernel', () => {\n    const kernelFacade = new InversifyKernelFacade();\n\n    const moduleId = Symbol('module');\n\n    const modules: interfaces.KernelModule[] = [\n      new KernelModule((bind: interfaces.Bind) => bind(moduleId).toConstantValue(1)),\n    ];\n\n    kernelFacade.loadKernelModules(modules);\n\n    expect(kernelFacade.getService(moduleId)).toEqual(1);\n  });\n});\n\n","jest.unmock('inversify');\njest.unmock('../InversifyKernelFacade');\nimport { KernelModule } from 'inversify';\nimport InversifyKernelFacade from '../InversifyKernelFacade';\ndescribe('InversifyKernelFacade', () => {\n    const module1Id = Symbol('module1');\n    const module2Id = Symbol('module2');\n    const module1 = new KernelModule((bind) => bind(module1Id).toConstantValue(1));\n    const module2 = new KernelModule((bind) => bind(module2Id).toConstantValue(2));\n    const baseModules = [\n        {\n            kernelModule: module1,\n            serviceId: module1Id,\n        },\n        {\n            kernelModule: module2,\n            serviceId: module2Id,\n        },\n    ];\n    it('loads modules into the kernel', () => {\n        const kernelFacade = new InversifyKernelFacade();\n        kernelFacade.loadModules(baseModules);\n        expect(kernelFacade._loadedUserModules.get(module1Id)).toEqual(true);\n        expect(kernelFacade._loadedUserModules.get(module2Id)).toEqual(true);\n        expect(kernelFacade.getService(module1Id)).toEqual(1);\n        expect(kernelFacade.getService(module2Id)).toEqual(2);\n        const module3Id = Symbol('module3');\n        const module3 = new KernelModule((bind) => bind(module3Id).toConstantValue(3));\n        const userModules2 = [\n            {\n                kernelModule: module3,\n                serviceId: module3Id,\n            },\n        ];\n        kernelFacade.loadModules(userModules2);\n        expect(kernelFacade._loadedUserModules.get(module3Id)).toEqual(true);\n        expect(kernelFacade.getService(module3Id)).toEqual(3);\n    });\n    it('unloads modules from the kernel', () => {\n        const kernelFacade = new InversifyKernelFacade();\n        kernelFacade.loadModules(baseModules);\n        kernelFacade.unloadModules(baseModules);\n        expect(kernelFacade._loadedUserModules.get(module1Id)).toEqual(false);\n        expect(kernelFacade._loadedUserModules.get(module2Id)).toEqual(false);\n    });\n    it('get all services with a same id', () => {\n        const kernelFacade = new InversifyKernelFacade();\n        const moduleId = Symbol('module');\n        const myModule = new KernelModule((bind) => {\n            bind(moduleId).toConstantValue(1);\n            bind(moduleId).toConstantValue(2);\n        });\n        const modules = [\n            {\n                kernelModule: myModule,\n                serviceId: moduleId,\n            },\n        ];\n        kernelFacade.loadModules(modules);\n        expect(kernelFacade._loadedUserModules.get(moduleId)).toEqual(true);\n        expect(kernelFacade.getAllServices(moduleId)).toEqual([1, 2]);\n    });\n    it('loads raw kernel module into the kernel', () => {\n        const kernelFacade = new InversifyKernelFacade();\n        const moduleId = Symbol('module');\n        const modules = [\n            new KernelModule((bind) => bind(moduleId).toConstantValue(1)),\n        ];\n        kernelFacade.loadKernelModules(modules);\n        expect(kernelFacade.getService(moduleId)).toEqual(1);\n    });\n});\n"]}