{"version":3,"sources":["src/configStores/RetaxConfigStore.js","src/configStores/RetaxConfigStore.ts"],"names":["initialConfig","api","authHeaderName","baseUrl","client","keepInitialState","lifecycle","undefined","react","router","static","store","initialState","middlewares","nonImmutableKeys","reducers","storeEnhancers","RetaxConfigStore","userConfig","config","mergeConfig"],"mappings":";;;;;;;AAAA;;;;;;;;ACKO,IAAMA,wCAA8B;AACzCC,SAAK;AACHC,wBAAgB,mBADb;AAEHC,iBAAS;AAFN,KADoC;AAKzCC,YAAQ;AACNC,0BAAkB;AADZ,KALiC;AAQzCC,eAAWC,SAR8B;AASzCC,WAAO,EATkC;AAUzCC,YAAQ;AACNC,gBAAQ;AADF,KAViC;AAazCC,WAAO;AACLC,sBAAc,EADT;AAELC,qBAAa,EAFR;AAGLC,0BAAkB,CAAC,SAAD,CAHb;AAILC,kBAAUR,SAJL;AAKLS,wBAAgB;AALX;AAbkC,CAApC;;IAsBPC,gB;;;AACE,8BAAYC,UAAZ,EAAoC;AAAA;;AAAA;;AAElC,cAAKC,MAAL,GAAcnB,aAAd;AACA,cAAKoB,WAAL,CAAiBF,UAAjB;AAHkC;AAInC;;;;;kBAKYD,gB","file":"RetaxConfigStore.js","sourcesContent":["import { ConfigStore } from 'retax-utils';\nexport const initialConfig = {\n    api: {\n        authHeaderName: 'auth-server-token',\n        baseUrl: '',\n    },\n    client: {\n        keepInitialState: false,\n    },\n    lifecycle: undefined,\n    react: {},\n    router: {\n        static: {},\n    },\n    store: {\n        initialState: {},\n        middlewares: [],\n        nonImmutableKeys: ['routing'],\n        reducers: undefined,\n        storeEnhancers: [],\n    },\n};\nclass RetaxConfigStore extends ConfigStore {\n    constructor(userConfig) {\n        super();\n        this.config = initialConfig;\n        this.mergeConfig(userConfig);\n    }\n}\nexport default RetaxConfigStore;\n","import { Store } from 'redux';\nimport { ConfigStore } from 'retax-utils';\n\nimport { IRetaxConfig, IRetaxConfigStore } from './interfaces';\n\nexport const initialConfig: IRetaxConfig = {\n  api: {\n    authHeaderName: 'auth-server-token',\n    baseUrl: '',\n  },\n  client: {\n    keepInitialState: false,\n  },\n  lifecycle: undefined,\n  react: {},\n  router: {\n    static: {},\n  },\n  store: {\n    initialState: {},\n    middlewares: [],\n    nonImmutableKeys: ['routing'],\n    reducers: undefined,\n    storeEnhancers: [],\n  },\n};\n\nabstract class RetaxConfigStore extends ConfigStore<IRetaxConfig> implements IRetaxConfigStore {\n  constructor(userConfig: IRetaxConfig) {\n    super();\n    this.config = initialConfig;\n    this.mergeConfig(userConfig);\n  }\n\n  public abstract evaluateConfig(store: Store<any>): IRetaxConfig;\n}\n\nexport default RetaxConfigStore;\n"]}