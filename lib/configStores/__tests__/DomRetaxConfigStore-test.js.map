{"version":3,"sources":["src/configStores/__tests__/DomRetaxConfigStore-test.js","src/configStores/__tests__/DomRetaxConfigStore-test.ts"],"names":["jest","unmock","describe","staticContext","request","req","header","fn","retaxConfig","router","static","myRoute","dynamicContext","dynamic","it","reduxStore","configStore","config","evaluatedConfig","evaluateConfig","expect","toEqual","undefined","curentUserAgent","navigator","userAgent","toBeCalledWith"],"mappings":";;AAKA;;;;AACA;;;;;;ACNAA,KAAKC,MAAL,CAAY,WAAZ;AACAD,KAAKC,MAAL,CAAY,OAAZ;AACAD,KAAKC,MAAL,CAAY,aAAZ;AACAD,KAAKC,MAAL,CAAY,kBAAZ;AACAD,KAAKC,MAAL,CAAY,wBAAZ;;AAKAC,SAAS,qBAAT,EAAgC,YAAA;AAC9B,QAAMC,gBAAgB;AACpBC,iBAAS;AACPC,iBAAK;AACHC,wBAAQN,KAAKO,EAAL;AADL;AADE,SADW;AAMpBC,qBAAa;AACXC,oBAAQ;AACNC,wBAAQ,EAAEC,SAAS,IAAX;AADF;AADG;AANO,KAAtB;AAaA,QAAMC,iBAAiB;AACrBR,iBAAS;AACPC,iBAAK;AACHC,wBAAQN,KAAKO,EAAL;AADL;AADE,SADY;AAMrBC,qBAAa;AACXC,oBAAQ;AACNI,yBAASb,KAAKO,EAAL;AADH;AADG;AANQ,KAAvB;AAcAO,OAAG,2CAAH,EAAgD,YAAA;AAC9C,YAAMC,aAAa,iCAAnB;AACA,YAAMC,cAAc,kCAA6Bb,aAA7B,CAApB;AAEAa,oBAAYC,MAAZ,GAAqBd,cAAcK,WAAnC,CAJ8C,CAIE;AAEhD,YAAMU,kBAAkBF,YAAYG,cAAZ,CAA2BJ,UAA3B,CAAxB;AAEAK,eAAOF,eAAP,EAAwBG,OAAxB,CAAgC;AAC9BZ,oBAAQ;AACNI,yBAASS,SADH;AAENZ,wBAAQ,EAAEC,SAAS,IAAX;AAFF;AADsB,SAAhC;AAMD,KAdD;AAgBAG,OAAG,4CAAH,EAAiD,YAAA;AAC/C,YAAMS,kBAAkBC,UAAUC,SAAlC;AACA,YAAMV,aAAa,iCAAnB;AACA,YAAMC,cAAc,kCAA6BJ,cAA7B,CAApB;AAEAI,oBAAYC,MAAZ,GAAqBL,eAAeJ,WAApC,CAL+C,CAKE;AAEjD,YAAMU,kBAAkBF,YAAYG,cAAZ,CAA2BJ,UAA3B,CAAxB;AAEAK,eAAOR,eAAeJ,WAAf,CAA2BC,MAA3B,CAAkCI,OAAzC,EAAkDa,cAAlD,CAAiEX,UAAjE,EAA6EQ,eAA7E;AAEAH,eAAOF,eAAP,EAAwBG,OAAxB,CAAgC;AAC9BZ,oBAAQ;AACNI,yBAASD,eAAeJ,WAAf,CAA2BC,MAA3B,CAAkCI,OADrC;AAENH,wBAAQY;AAFF;AADsB,SAAhC;AAMD,KAjBD;AAkBD,CA9DD","file":"DomRetaxConfigStore-test.js","sourcesContent":["jest.unmock('inversify');\njest.unmock('redux');\njest.unmock('retax-utils');\njest.unmock('redux-mock-store');\njest.unmock('../DomRetaxConfigStore');\nimport configureStore from 'redux-mock-store';\nimport DomRetaxConfigStore from '../DomRetaxConfigStore';\ndescribe('DomRetaxConfigStore', () => {\n    const staticContext = {\n        request: {\n            req: {\n                header: jest.fn(),\n            },\n        },\n        retaxConfig: {\n            router: {\n                static: { myRoute: true },\n            },\n        },\n    };\n    const dynamicContext = {\n        request: {\n            req: {\n                header: jest.fn(),\n            },\n        },\n        retaxConfig: {\n            router: {\n                dynamic: jest.fn(),\n            },\n        },\n    };\n    it('evaluates the config with a static router', () => {\n        const reduxStore = configureStore()();\n        const configStore = new DomRetaxConfigStore(staticContext);\n        configStore.config = staticContext.retaxConfig; // simulate the behavior of RetaxConfigStore\n        const evaluatedConfig = configStore.evaluateConfig(reduxStore);\n        expect(evaluatedConfig).toEqual({\n            router: {\n                dynamic: undefined,\n                static: { myRoute: true },\n            },\n        });\n    });\n    it('evaluates the config with a dynamic router', () => {\n        const curentUserAgent = navigator.userAgent;\n        const reduxStore = configureStore()();\n        const configStore = new DomRetaxConfigStore(dynamicContext);\n        configStore.config = dynamicContext.retaxConfig; // simulate the behavior of RetaxConfigStore\n        const evaluatedConfig = configStore.evaluateConfig(reduxStore);\n        expect(dynamicContext.retaxConfig.router.dynamic).toBeCalledWith(reduxStore, curentUserAgent);\n        expect(evaluatedConfig).toEqual({\n            router: {\n                dynamic: dynamicContext.retaxConfig.router.dynamic,\n                static: undefined,\n            },\n        });\n    });\n});\n","jest.unmock('inversify');\njest.unmock('redux');\njest.unmock('retax-utils');\njest.unmock('redux-mock-store');\njest.unmock('../DomRetaxConfigStore');\n\nimport configureStore from 'redux-mock-store';\nimport DomRetaxConfigStore from '../DomRetaxConfigStore';\n\ndescribe('DomRetaxConfigStore', () => {\n  const staticContext = {\n    request: {\n      req: {\n        header: jest.fn(),\n      },\n    },\n    retaxConfig: {\n      router: {\n        static: { myRoute: true },\n      },\n    },\n  };\n\n  const dynamicContext = {\n    request: {\n      req: {\n        header: jest.fn(),\n      },\n    },\n    retaxConfig: {\n      router: {\n        dynamic: jest.fn(),\n      },\n    },\n  };\n\n\n  it('evaluates the config with a static router', () => {\n    const reduxStore = configureStore()();\n    const configStore = new DomRetaxConfigStore(<any>staticContext);\n\n    configStore.config = staticContext.retaxConfig; // simulate the behavior of RetaxConfigStore\n\n    const evaluatedConfig = configStore.evaluateConfig(reduxStore);\n\n    expect(evaluatedConfig).toEqual({\n      router: {\n        dynamic: undefined,\n        static: { myRoute: true },\n      },\n    });\n  });\n\n  it('evaluates the config with a dynamic router', () => {\n    const curentUserAgent = navigator.userAgent;\n    const reduxStore = configureStore()();\n    const configStore = new DomRetaxConfigStore(<any>dynamicContext);\n\n    configStore.config = dynamicContext.retaxConfig; // simulate the behavior of RetaxConfigStore\n\n    const evaluatedConfig = configStore.evaluateConfig(reduxStore);\n\n    expect(dynamicContext.retaxConfig.router.dynamic).toBeCalledWith(reduxStore, curentUserAgent);\n\n    expect(evaluatedConfig).toEqual({\n      router: {\n        dynamic: dynamicContext.retaxConfig.router.dynamic,\n        static: undefined,\n      },\n    });\n  });\n});\n"]}