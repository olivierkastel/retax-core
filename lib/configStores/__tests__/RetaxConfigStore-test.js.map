{"version":3,"sources":["src/configStores/__tests__/RetaxConfigStore-test.js","src/configStores/__tests__/RetaxConfigStore-test.ts"],"names":["jest","unmock","describe","Consumer","store","it","router","dynamic","undefined","expect","config","toEqual","api","authHeaderName","baseUrl","client","keepInitialState","lifecycle","react","static","initialState","middlewares","nonImmutableKeys","reducers","storeEnhancers"],"mappings":";;;;AAGA;;;;;;;;;;;;ACHAA,KAAKC,MAAL,CAAY,WAAZ;AACAD,KAAKC,MAAL,CAAY,aAAZ;AACAD,KAAKC,MAAL,CAAY,qBAAZ;;AAIAC,SAAS,kBAAT,EAA6B,YAAA;AAAA,QAC3BC,QAD2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAEHC,KAFG,EAEO;AAC9B,uBAAOA,KAAP;AACD;AAJwB;;AAAA;AAAA;;AAO3BC,OAAG,4BAAH,EAAiC,YAAA;AAC/B,YAAMD,QAAQ,IAAID,QAAJ,CAAa;AACzBG,oBAAQ;AACNC,yBAASC;AADH;AADiB,SAAb,CAAd;AAMAC,eAAOL,MAAMM,MAAb,EAAqBC,OAArB,CAA6B;AAC3BC,iBAAK;AACHC,gCAAgB,YADb;AAEHC,yBAAS;AAFN,aADsB;AAK3BC,oBAAQ;AACNC,kCAAkB;AADZ,aALmB;AAQ3BC,uBAAWT,SARgB;AAS3BU,mBAAO,EAToB;AAU3BZ,oBAAQ;AACNC,yBAASC,SADH;AAENW,wBAAQ;AAFF,aAVmB;AAc3Bf,mBAAO;AACLgB,8BAAc,EADT;AAELC,6BAAa,EAFR;AAGLC,kCAAkB,CAAC,SAAD,CAHb;AAILC,0BAAUf,SAJL;AAKLgB,gCAAgB;AALX;AAdoB,SAA7B;AAsBD,KA7BD;AA8BD,CArCD","file":"RetaxConfigStore-test.js","sourcesContent":["jest.unmock('inversify');\njest.unmock('retax-utils');\njest.unmock('../RetaxConfigStore');\nimport RetaxConfigStore from '../RetaxConfigStore';\ndescribe('RetaxConfigStore', () => {\n    class Consumer extends RetaxConfigStore {\n        evaluateConfig(store) {\n            return store;\n        }\n    }\n    it('defines the initial config', () => {\n        const store = new Consumer({\n            router: {\n                dynamic: undefined,\n            },\n        });\n        expect(store.config).toEqual({\n            api: {\n                authHeaderName: 'auth_token',\n                baseUrl: '',\n            },\n            client: {\n                keepInitialState: false,\n            },\n            lifecycle: undefined,\n            react: {},\n            router: {\n                dynamic: undefined,\n                static: {},\n            },\n            store: {\n                initialState: {},\n                middlewares: [],\n                nonImmutableKeys: ['routing'],\n                reducers: undefined,\n                storeEnhancers: [],\n            },\n        });\n    });\n});\n","jest.unmock('inversify');\njest.unmock('retax-utils');\njest.unmock('../RetaxConfigStore');\n\nimport RetaxConfigStore from '../RetaxConfigStore';\n\ndescribe('RetaxConfigStore', () => {\n  class Consumer extends RetaxConfigStore {\n    public evaluateConfig(store: any): any {\n      return store;\n    }\n  }\n\n  it('defines the initial config', () => {\n    const store = new Consumer({\n      router: {\n        dynamic: undefined,\n      },\n    });\n\n    expect(store.config).toEqual({\n      api: {\n        authHeaderName: 'auth_token',\n        baseUrl: '',\n      },\n      client: {\n        keepInitialState: false,\n      },\n      lifecycle: undefined,\n      react: {},\n      router: {\n        dynamic: undefined,\n        static: {},\n      },\n      store: {\n        initialState: {},\n        middlewares: [],\n        nonImmutableKeys: ['routing'],\n        reducers: undefined,\n        storeEnhancers: [],\n      },\n    });\n  });\n});\n"]}