{"version":3,"sources":["src/stateProxies/StateConverter.js","src/stateProxies/StateConverter.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","AStateConverter","object","nonImmutableKeys","immutableObject","keys","reduce","res","cur","newRes","shouldConvert","includes"],"mappings":";;;;;;;;;;AASA;;AACA;;;;AAVA,IAAIA,aAAc,aAAQ,UAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,QAAIC,IAAIC,UAAUC,MAAlB;AAAA,QAA0BC,IAAIH,IAAI,CAAJ,GAAQH,MAAR,GAAiBE,SAAS,IAAT,GAAgBA,OAAOK,OAAOC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,QAA2HO,CAA3H;AACA,QAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQC,QAAf,KAA4B,UAA/D,EAA2EL,IAAII,QAAQC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,IAAIb,WAAWM,MAAX,GAAoB,CAAjC,EAAoCO,KAAK,CAAzC,EAA4CA,GAA5C;AAAiD,YAAIH,IAAIV,WAAWa,CAAX,CAAR,EAAuBN,IAAI,CAACH,IAAI,CAAJ,GAAQM,EAAEH,CAAF,CAAR,GAAeH,IAAI,CAAJ,GAAQM,EAAET,MAAF,EAAUC,GAAV,EAAeK,CAAf,CAAR,GAA4BG,EAAET,MAAF,EAAUC,GAAV,CAA5C,KAA+DK,CAAnE;AAAxE,KACL,OAAOH,IAAI,CAAJ,IAASG,CAAT,IAAcC,OAAOM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;AAMA,IAAIQ,aAAc,aAAQ,UAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1D,QAAI,QAAON,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,QAAQO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;;ACDA;;;AAIA,IAAAE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,kDACgH;AAAA,gBAApDC,MAAoD,uEAAnC,EAAmC;AAAA,gBAA/BC,gBAA+B,uEAAF,EAAE;;AAC5G,gBAAMC,kBAAqBd,OAAOe,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,UAACC,GAAD,EAASC,GAAT,EAAoB;AACxE,oBAAMC,SAASF,GAAf;AACA,oBAAMG,gBAAgB,CAACP,iBAAiBQ,QAAjB,CAA0BH,GAA1B,CAAvB;AAEAC,uBAAOD,GAAP,IAAcE,gBAAgB,uBAAOR,OAAOM,GAAP,CAAP,CAAhB,GAAsCN,OAAOM,GAAP,CAApD;AAEA,uBAAOC,MAAP;AACD,aAP0B,EAOxBP,MAPwB,CAA3B;AASA,mBAAOE,eAAP;AACD;AAZH;;AAAA;AAAA,GAAA;AADAH,kBAAApB,WAAA,CAAC,4BAAD,EDmBIgB,WAAW,mBAAX,EAAgC,EAAhC,CCnBJ,CAAA,EDoBGI,eCpBH,CAAA;kBAgBeA,e","file":"StateConverter.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { injectable } from 'inversify';\nimport { fromJS } from 'immutable';\n/**\n * Feature inheritance. Not realy good practice...\n */\nlet AStateConverter = class AStateConverter {\n    convertStateToImmutable(object = {}, nonImmutableKeys = []) {\n        const immutableObject = Object.keys(object).reduce((res, cur) => {\n            const newRes = res;\n            const shouldConvert = !nonImmutableKeys.includes(cur);\n            newRes[cur] = shouldConvert ? fromJS(object[cur]) : object[cur];\n            return newRes;\n        }, object);\n        return immutableObject;\n    }\n};\nAStateConverter = __decorate([\n    injectable(), \n    __metadata('design:paramtypes', [])\n], AStateConverter);\nexport default AStateConverter;\n","import { injectable } from 'inversify';\nimport { fromJS } from 'immutable';\n\nimport { IStateConverter, IImmutableState } from './interfaces';\n\n/**\n * Feature inheritance. Not realy good practice...\n */\n@injectable()\nabstract class AStateConverter implements IStateConverter {\n  public convertStateToImmutable<S extends IImmutableState>(object: Object = {}, nonImmutableKeys: string[] = []): S {\n    const immutableObject: S = Object.keys(object).reduce((res: S, cur: string) => {\n      const newRes = res;\n      const shouldConvert = !nonImmutableKeys.includes(cur);\n\n      newRes[cur] = shouldConvert ? fromJS(object[cur]) : object[cur];\n\n      return newRes;\n    }, object as S);\n\n    return immutableObject;\n  }\n}\n\nexport default AStateConverter;\n"]}