{"version":3,"sources":["src/redux/__tests__/ReduxFacade-test.js","src/redux/__tests__/ReduxFacade-test.ts"],"names":["jest","disableAutomock","describe","context","history","cookieProxy","authToken","configStore","config","store","middlewares","reducers","storeEnhancers","it","facade","expect","toThrow","initialize","toEqual","getAuthToken","retax","here","getState","toJS","setAuthToken"],"mappings":";;AACA;;AACA;;AACA;;;;;;ACHMA,KAAMC,eAAN;;AAONC,SAAS,kBAAT,EAA6B,YAAA;AAC3B,QAAMC,UAAU;AACdC;AADc,KAAhB;AAIA,QAAMC,cAAc;AAClBC,mBAAW;AADO,KAApB;AAIA,QAAMC,cAAc;AAClBC,gBAAQ;AACNC,mBAAO;AACLC,6BAAa,EADR;AAGLC,0BAAU,EAHL;AAILC,gCAAgB;AAJX;AADD;AADU,KAApB;AAWAC,OAAG,6CAAH,EAAkD,YAAA;AAChD,YAAMC,SAAS,0BACRP,WADQ,EAERF,WAFQ,EAGRF,OAHQ,CAAf;AAMAY,eAAO;AAAA,mBAAMD,OAAOL,KAAb;AAAA,SAAP,EAA2BO,OAA3B;AACD,KARD;AAUAH,OAAG,mDAAH,EAAwD,YAAA;AACtD,YAAMC,SAAS,0BACRP,WADQ,EAERF,WAFQ,EAGRF,OAHQ,CAAf;AAMA,YAAMM,QAAQK,OAAOG,UAAP,CAAkB,EAAlB,CAAd;AAEAF,eAAOD,OAAOL,KAAd,EAAqBS,OAArB,CAA6BT,KAA7B;AACAM,eAAOD,OAAOK,YAAP,EAAP,EAA8BD,OAA9B,CAAsC,MAAtC;AACD,KAXD;AAaAL,OAAG,8CAAH,EAAmD,YAAA;AACjD,YAAMC,SAAS,0BACRP,WADQ,EAERF,WAFQ,EAGRF,OAHQ,CAAf;AAMAW,eAAOG,UAAP,CAAkB;AAChBG,mBAAO,uBAAO,EAAEC,MAAM,IAAR,EAAP;AADS,SAAlB;AAIAN,eAAOD,OAAOL,KAAP,CAAaa,QAAb,GAAwBF,KAAxB,CAA8BG,IAA9B,EAAP,EAA6CL,OAA7C,CAAqD;AACnDZ,uBAAW,MADwC;AAEnDe,kBAAM;AAF6C,SAArD;AAID,KAfD;AAiBAR,OAAG,oBAAH,EAAyB,YAAA;AACvB,YAAMC,SAAS,0BACRP,WADQ,EAERF,WAFQ,EAGRF,OAHQ,CAAf;AAMAW,eAAOG,UAAP,CAAkB,EAAlB;AACAH,eAAOU,YAAP,CAAoB,MAApB;AACAT,eAAOD,OAAOK,YAAP,EAAP,EAA8BD,OAA9B,CAAsC,MAAtC;AACD,KAVD;AAWD,CAvED","file":"ReduxFacade-test.js","sourcesContent":["jest.disableAutomock();\nimport { browserHistory } from 'react-router';\nimport { fromJS } from 'immutable';\nimport ReduxFacade from '../ReduxFacade';\ndescribe('ReduxFacade Flow', () => {\n    const context = {\n        history: browserHistory,\n    };\n    const cookieProxy = {\n        authToken: '1234',\n    };\n    const configStore = {\n        config: {\n            store: {\n                middlewares: [],\n                reducers: {},\n                storeEnhancers: [],\n            },\n        },\n    };\n    it('throws an error when the store is undefined', () => {\n        const facade = new ReduxFacade(configStore, cookieProxy, context);\n        expect(() => facade.store).toThrow();\n    });\n    it('initializes the store and retrieve the auth token', () => {\n        const facade = new ReduxFacade(configStore, cookieProxy, context);\n        const store = facade.initialize({});\n        expect(facade.store).toEqual(store);\n        expect(facade.getAuthToken()).toEqual('1234');\n    });\n    it('initializes the store with an initiale state', () => {\n        const facade = new ReduxFacade(configStore, cookieProxy, context);\n        facade.initialize({\n            retax: fromJS({ here: true }),\n        });\n        expect(facade.store.getState().retax.toJS()).toEqual({\n            authToken: '1234',\n            here: true,\n        });\n    });\n    it('set the auth token', () => {\n        const facade = new ReduxFacade(configStore, cookieProxy, context);\n        facade.initialize({});\n        facade.setAuthToken('4321');\n        expect(facade.getAuthToken()).toEqual('4321');\n    });\n});\n","(<any>jest).disableAutomock();\n\nimport { browserHistory } from 'react-router';\nimport { fromJS } from 'immutable';\n\nimport ReduxFacade from '../ReduxFacade';\n\ndescribe('ReduxFacade Flow', () => {\n  const context = {\n    history: browserHistory,\n  };\n\n  const cookieProxy = {\n    authToken: '1234',\n  };\n\n  const configStore = {\n    config: {\n      store: {\n        middlewares: [],\n\n        reducers: {},\n        storeEnhancers: [],\n      },\n    },\n  };\n\n  it('throws an error when the store is undefined', () => {\n    const facade = new ReduxFacade(\n      <any>configStore,\n      <any>cookieProxy,\n      <any>context\n    );\n\n    expect(() => facade.store).toThrow();\n  });\n\n  it('initializes the store and retrieve the auth token', () => {\n    const facade = new ReduxFacade(\n      <any>configStore,\n      <any>cookieProxy,\n      <any>context\n    );\n\n    const store = facade.initialize({});\n\n    expect(facade.store).toEqual(store);\n    expect(facade.getAuthToken()).toEqual('1234');\n  });\n\n  it('initializes the store with an initiale state', () => {\n    const facade = new ReduxFacade(\n      <any>configStore,\n      <any>cookieProxy,\n      <any>context\n    );\n\n    facade.initialize({\n      retax: fromJS({ here: true }),\n    });\n\n    expect(facade.store.getState().retax.toJS()).toEqual({\n      authToken: '1234',\n      here: true,\n    });\n  });\n\n  it('set the auth token', () => {\n    const facade = new ReduxFacade(\n      <any>configStore,\n      <any>cookieProxy,\n      <any>context\n    );\n\n    facade.initialize({});\n    facade.setAuthToken('4321');\n    expect(facade.getAuthToken()).toEqual('4321');\n  });\n});\n"]}