{"version":3,"sources":["src/redux/middlewares/credentialsMiddleware.ts","src/redux/middlewares/credentialsMiddleware.js"],"names":["credentialsMiddleware","cookieProxy","action","payload","authToken","deleteAuthToken","next"],"mappings":";;;;;kBAOAA,qB;;ACPA;;ADOA,SAAAA,qBAAA,CAA8CC,WAA9C,EAAuE;AACrE,WAAO;AAAA,eAAM;AAAA,mBAAQ,UAACC,MAAD,EAA0B;AAC7C,oBAAI,2CAAqBA,MAArB,CAAJ,EAAkC;AAAA,wBACxBC,OADwB,GACZD,MADY,CACxBC,OADwB;;AAGhCF,gCAAYG,SAAZ,GAAwBD,OAAxB;AACD,iBAJD,MAIO,IAAI,8CAAwBD,MAAxB,CAAJ,EAAqC;AAC1CD,gCAAYI,eAAZ;AACD;AAED,uBAAOC,KAAKJ,MAAL,CAAP;AACD,aAVY;AAAA,SAAN;AAAA,KAAP;AAWD","file":"credentialsMiddleware.js","sourcesContent":["import { Middleware } from 'redux';\n\nimport { isSetAuthTokenAction, isRemoveAuthTokenAction } from '../actionsCreators';\n\nimport { ICookieProxy } from '../../cookieProxies';\nimport { IAction } from 'retax-utils';\n\nexport default function credentialsMiddleware(cookieProxy: ICookieProxy): Middleware {\n  return () => next => (action: IAction<any, any>) => {\n    if (isSetAuthTokenAction(action)) {\n      const { payload } = action;\n\n      cookieProxy.authToken = payload;\n    } else if (isRemoveAuthTokenAction(action)) {\n      cookieProxy.deleteAuthToken();\n    }\n\n    return next(action);\n  };\n}\n","import { isSetAuthTokenAction, isRemoveAuthTokenAction } from '../actionsCreators';\nexport default function credentialsMiddleware(cookieProxy) {\n    return () => next => (action) => {\n        if (isSetAuthTokenAction(action)) {\n            const { payload } = action;\n            cookieProxy.authToken = payload;\n        }\n        else if (isRemoveAuthTokenAction(action)) {\n            cookieProxy.deleteAuthToken();\n        }\n        return next(action);\n    };\n}\n"]}