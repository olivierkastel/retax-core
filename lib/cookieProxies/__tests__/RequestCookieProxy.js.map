{"version":3,"sources":["src/cookieProxies/__tests__/RequestCookieProxy.js","src/cookieProxies/__tests__/RequestCookieProxy.ts"],"names":["jest","unmock","describe","context","request","req","cookies","res","cookie","fn","it","cookieProxy","authToken","expect","toEqual","toBeCalledWith","deleteAuthToken","undefined"],"mappings":";;AAKA;;AACA;;;;;;;;ACNAA,KAAKC,MAAL,CAAY,WAAZ;AACAD,KAAKC,MAAL,CAAY,iBAAZ;AACAD,KAAKC,MAAL,CAAY,gCAAZ;AACAD,KAAKC,MAAL,CAAY,uBAAZ;AACAD,KAAKC,MAAL,CAAY,gBAAZ;;AAKAC,SAAS,oBAAT,EAA+B,YAAA;AAC7B,QAAMC,UAAU;AACdC,iBAAS;AACPC,iBAAK;AACHC,+EAC2B,MAD3B;AADG,aADE;AAMPC,iBAAK;AACHC,wBAAQR,KAAKS,EAAL;AADL;AANE;AADK,KAAhB;AAaAC,OAAG,8BAAH,EAAmC,YAAA;AACjC,YAAMC,cAAc,iCAA4BR,OAA5B,CAApB;AAEA;AAHiC,YAIzBS,SAJyB,GAIXD,WAJW,CAIzBC,SAJyB;AAKjC;;AAEAC,eAAOV,QAAQC,OAAR,CAAgBC,GAAhB,CAAoBC,OAApB,kCAAP,EACGQ,OADH,CACW,MADX;AAED,KATD;AAWAJ,OAAG,oBAAH,EAAyB,YAAA;AACvB,YAAMC,cAAc,iCAA4BR,OAA5B,CAApB;AAEAQ,oBAAYC,SAAZ,GAAwB,MAAxB;AAEAC,eAAOV,QAAQC,OAAR,CAAgBG,GAAhB,CAAoBC,MAA3B,EAAmCO,cAAnC,mCAEE,MAFF;AAID,KATD;AAWAL,OAAG,wBAAH,EAA6B,YAAA;AAC3B,YAAMC,cAAc,iCAA4BR,OAA5B,CAApB;AAEAQ,oBAAYK,eAAZ;AAEAH,eAAOV,QAAQC,OAAR,CAAgBG,GAAhB,CAAoBC,MAA3B,EAAmCO,cAAnC,mCAEEE,SAFF;AAID,KATD;AAUD,CA9CD","file":"RequestCookieProxy.js","sourcesContent":["jest.unmock('inversify');\njest.unmock('../../constants');\njest.unmock('../../constants/internalConfig');\njest.unmock('../RequestCookieProxy');\njest.unmock('../CookieProxy');\nimport { COOKIE_AUTH_TOKEN_KEY } from '../../constants';\nimport RequestCookieProxy from '../RequestCookieProxy';\ndescribe('RequestCookieProxy', () => {\n    const context = {\n        request: {\n            req: {\n                cookies: {\n                    [COOKIE_AUTH_TOKEN_KEY]: '1234',\n                },\n            },\n            res: {\n                cookie: jest.fn(),\n            },\n        },\n    };\n    it('reads the current auth token', () => {\n        const cookieProxy = new RequestCookieProxy(context);\n        /* tslint:disable */\n        const { authToken } = cookieProxy;\n        /* tslint:enable */\n        expect(context.request.req.cookies[COOKIE_AUTH_TOKEN_KEY])\n            .toEqual('1234');\n    });\n    it('set the auth token', () => {\n        const cookieProxy = new RequestCookieProxy(context);\n        cookieProxy.authToken = '1234';\n        expect(context.request.res.cookie).toBeCalledWith(COOKIE_AUTH_TOKEN_KEY, '1234');\n    });\n    it('removes the auth token', () => {\n        const cookieProxy = new RequestCookieProxy(context);\n        cookieProxy.deleteAuthToken();\n        expect(context.request.res.cookie).toBeCalledWith(COOKIE_AUTH_TOKEN_KEY, undefined);\n    });\n});\n","jest.unmock('inversify');\njest.unmock('../../constants');\njest.unmock('../../constants/internalConfig');\njest.unmock('../RequestCookieProxy');\njest.unmock('../CookieProxy');\n\nimport { COOKIE_AUTH_TOKEN_KEY } from '../../constants';\nimport RequestCookieProxy from '../RequestCookieProxy';\n\ndescribe('RequestCookieProxy', () => {\n  const context = {\n    request: {\n      req: {\n        cookies: {\n          [COOKIE_AUTH_TOKEN_KEY]: '1234',\n        },\n      },\n      res: {\n        cookie: jest.fn(),\n      },\n    },\n  };\n\n  it('reads the current auth token', () => {\n    const cookieProxy = new RequestCookieProxy(<any>context);\n\n    /* tslint:disable */\n    const { authToken } = cookieProxy;\n    /* tslint:enable */\n\n    expect(context.request.req.cookies[COOKIE_AUTH_TOKEN_KEY])\n      .toEqual('1234');\n  });\n\n  it('set the auth token', () => {\n    const cookieProxy = new RequestCookieProxy(<any>context);\n\n    cookieProxy.authToken = '1234';\n\n    expect(context.request.res.cookie).toBeCalledWith(\n      COOKIE_AUTH_TOKEN_KEY,\n      '1234'\n    );\n  });\n\n  it('removes the auth token', () => {\n    const cookieProxy = new RequestCookieProxy(<any>context);\n\n    cookieProxy.deleteAuthToken();\n\n    expect(context.request.res.cookie).toBeCalledWith(\n      COOKIE_AUTH_TOKEN_KEY,\n      undefined\n    );\n  });\n});\n\n"]}