{"version":3,"sources":["src/reactRouter/__tests__/ReactRouterFacade-test.js","src/reactRouter/__tests__/ReactRouterFacade-test.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","throw","result","done","then","apply","jest","disableAutomock","describe","history","context","reduxFacade","store","configStore","evaluateConfig","fn","router","static","childRoutes","path","onEnter","nextState","replace","it","routerFacade","expect","renderProps","toThrow","pit","initialize","toBeTruthy","location","pathname","toEqual","resolveRoute","error","message"],"mappings":"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","file":"ReactRouterFacade-test.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n};\njest.disableAutomock();\nimport { createMemoryHistory } from 'react-router';\nimport configureStore from 'redux-mock-store';\nimport ReactRouterFacade from '../ReactRouterFacade';\ndescribe('ReactRouterFacade', () => {\n    const history = createMemoryHistory();\n    const context = {\n        history: history,\n    };\n    const reduxFacade = {\n        store: configureStore()({}),\n    };\n    const configStore = {\n        evaluateConfig: jest.fn(() => ({\n            router: {\n                static: {\n                    childRoutes: [\n                        { path: 'home' },\n                        {\n                            path: 'redirect',\n                            onEnter(nextState, replace) {\n                                replace('/home');\n                            },\n                        },\n                    ],\n                    path: '/',\n                },\n            },\n        })),\n    };\n    it('throws when render props are not yet computed', () => {\n        const routerFacade = new ReactRouterFacade(context, reduxFacade, configStore);\n        expect(() => routerFacade.renderProps).toThrow();\n    });\n    pit('initialize the facade', () => __awaiter(this, void 0, void 0, function* () {\n        history.replace('/home');\n        const routerFacade = new ReactRouterFacade(context, reduxFacade, configStore);\n        const renderProps = yield routerFacade.initialize();\n        expect(renderProps).toBeTruthy();\n        expect(renderProps.location.pathname).toEqual('/home');\n        expect(routerFacade.renderProps).toEqual(renderProps);\n    }));\n    pit('redirect to another route', () => __awaiter(this, void 0, void 0, function* () {\n        history.replace('/redirect');\n        const routerFacade = new ReactRouterFacade(context, reduxFacade, configStore);\n        const renderProps = yield routerFacade.resolveRoute();\n        expect(renderProps).toBeTruthy();\n        expect(renderProps.location.pathname).toEqual('/home');\n    }));\n    pit('throws an error when nothing match', () => __awaiter(this, void 0, void 0, function* () {\n        history.replace('/error');\n        const routerFacade = new ReactRouterFacade(context, reduxFacade, configStore);\n        let error;\n        try {\n            yield routerFacade.resolveRoute();\n        }\n        catch (e) {\n            error = e;\n        }\n        finally {\n            expect(error.message).toEqual('Error in react-router, too much try');\n        }\n    }));\n});\n","(<any>jest).disableAutomock();\n\nimport { createMemoryHistory } from 'react-router';\nimport configureStore from 'redux-mock-store';\n\nimport ReactRouterFacade from '../ReactRouterFacade';\n\ndescribe('ReactRouterFacade', () => {\n  const history = createMemoryHistory();\n  const context = {\n    history: history,\n  };\n\n  const reduxFacade = {\n    store: configureStore()({}),\n  };\n\n  const configStore = {\n    evaluateConfig: jest.fn(() => ({\n      router: {\n        static: {\n          childRoutes: [\n            { path: 'home' },\n            {\n              path: 'redirect',\n              onEnter(nextState: any, replace: any): any {\n                replace('/home');\n              },\n            },\n          ],\n          path: '/',\n        },\n      },\n    })),\n  };\n\n  it('throws when render props are not yet computed', () => {\n    const routerFacade = new ReactRouterFacade(\n      <any>context,\n      <any>reduxFacade,\n      <any>configStore\n    );\n\n    expect(() => routerFacade.renderProps).toThrow();\n  });\n\n  pit('initialize the facade', async () => {\n    history.replace('/home');\n\n    const routerFacade = new ReactRouterFacade(\n      <any>context,\n      <any>reduxFacade,\n      <any>configStore\n    );\n\n    const renderProps = await routerFacade.initialize();\n\n    expect(renderProps).toBeTruthy();\n    expect(renderProps.location.pathname).toEqual('/home');\n    expect(routerFacade.renderProps).toEqual(renderProps);\n  });\n\n  pit('redirect to another route', async () => {\n    history.replace('/redirect');\n\n    const routerFacade = new ReactRouterFacade(\n      <any>context,\n      <any>reduxFacade,\n      <any>configStore\n    );\n\n    const renderProps = await routerFacade.resolveRoute();\n\n    expect(renderProps).toBeTruthy();\n    expect(renderProps.location.pathname).toEqual('/home');\n  });\n\n  pit('throws an error when nothing match', async () => {\n    history.replace('/error');\n\n    const routerFacade = new ReactRouterFacade(\n      <any>context,\n      <any>reduxFacade,\n      <any>configStore\n    );\n\n    let error;\n\n    try {\n      await routerFacade.resolveRoute();\n    } catch (e) {\n      error = e;\n    } finally {\n      expect(error.message).toEqual('Error in react-router, too much try');\n    }\n  });\n});\n"]}